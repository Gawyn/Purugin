{"name":"Purugin","tagline":"Write Minecraft Plugins in Ruby","body":"Purugin (pronounces 'PRuggin') is a plugin framework which sites on top of Bukkit that allows you to\r\nwrite plugins in a Ruby syntax.\r\n\r\nOnce you copy Purugin.jar into your plugins directory you only need to drop\r\n.rb files into your plugins directory.  If they contain code which includes\r\nPurugin::Plugin, then they will load and get registered as Bukkit plugins.\r\n\r\n## Example\r\n\r\nHere is a plugin which gets registered as a plugin in Bukkit which tells\r\nevery use in the players world when a player joins or quits the world:\r\n\r\n```ruby\r\n#--------- examples/player_joined_full_class.rb ----------\r\nclass PlayerJoinedPlugin\r\n  include Purugin::Plugin, Purugin::Colors\r\n  description 'PlayerJoined', 0.1\r\n  \r\n  def on_enable\r\n    # Tell everyone in players world that they have joined\r\n    event(:player_join) do |e|\r\n      e.player.world.players.each do |p| \r\n        p.msg red(\"Player #{e.player.name} has joined\")\r\n      end\r\n    end\r\n\r\n    # Tell everyone in players world that they have quit\r\n    event(:player_quit) do |e|\r\n      e.player.world.players.each do |p| \r\n        p.msg red(\"Player #{e.player.name} has quit\")\r\n      end\r\n    end\r\n  end\r\nend\r\n```\r\n\r\n### Plugin Dependencies\r\n\r\nPlugins can depend on other plugins.  There are multiple ways of accessing \r\ndependent plugins.  The first is to declare your plugin dependencies at the top\r\nof your Purugin:\r\n\r\n```ruby\r\n    class PortsPlugin\r\n      include Purugin::Plugin, Purugin::Colors\r\n      description 'Ports', 0.3\r\n      required :LocsPlus, :include => :CoordinateEncoding\r\n      #...\r\n    end\r\n```\r\n\r\nThis example shows that the 'Ports' plugin requires (via 'required' method) \r\n the 'LocsPlus' plugin and that it should include the 'CoordinateEncoding' module from the 'LocsPlus' plugin.\r\n\r\nYou can specify optional dependencies via the optional declaration:\r\n\r\n```ruby\r\n    optional :Permissions\r\n```\r\n\r\nAs a side-effect both required and optional will define a method by the same \r\nname as plugin being referenced (Note: This may change since plugin names may \r\nnot conform to sane Ruby-naming and some people don't like methods like \r\n'Permissions()').\r\n\r\nA second way to get a live reference to a plugin is to ask the plugin manager:\r\n\r\n```ruby\r\n    plugin_manager['Permissions']\r\n```\r\n\r\nThis has the advantage that a plugin can be named anything and you will still \r\nbe able to reference it.\r\n\r\n## Running\r\n\r\nTo run Purugin, you just copy Purugin.jar into your plugins directory like any \r\nother minecraft plugin.  Once running you can write Purugins and copy \r\nthose .rb files into your plugins directory.  Simple!  \r\n\r\nbin/run.sh and bin/run.bat are provided with defaults that I use and it also sets a local GEM_HOME:\r\n\r\n```text\r\nGEM_HOME=./gems java -Xms1024M -Xmx1024M -jar craftbukkit.jar\r\n```\r\n## Building Purugin locally\r\n\r\n1. Install maven 3\r\n2. Invoke: `mvn clean package`\r\n\r\n## Other Novelties\r\n\r\n[Purogo](https://github.com/enebo/Purugin/wiki/Purogo-Introduction) - A 3D Logo implementation in Purugin.\r\n\r\n## Contributors\r\n\r\n`git shortlog -s -n`\r\n\r\n    199  Thomas E. Enebo\r\n     14  Thomas E Enebo\r\n     10  Eric Anderson\r\n      7  Marv Cool\r\n      6  Thomas Dervan\r\n      4  Humza\r\n      3  aumgn\r\n      2  mml\r\n      1  Tom Dervan\r\n      1  chase4926\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}